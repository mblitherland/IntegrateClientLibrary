/*
 * ManualAckForm.java
 *
 * Created on September 28, 2007, 6:45 PM
 */

package org.nule.integrateclient.extra;

import java.text.*;
import java.util.*;

import javax.swing.*;

import org.nule.integrateclient.net.*;
import org.nule.lighthl7lib.util.*;

/**
 *
 * @author  mike
 */
public class ManualAckForm extends JPanel implements Runnable {
    
    private static ManualAckForm me;
    private List waitingMessage = new ArrayList();
    private String currentReply = null;
    private SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/hh HH:mm:ss zzz");
    
    /** Creates new form ManualAckForm */
    private ManualAckForm() {
        initComponents();
        messageReceived.setText("Don't forget to start your client!");
        sdf.setTimeZone(TimeZone.getDefault());
        Thread t = new Thread(this);
        t.start();
    }
    
    public static ManualAckForm getInstance() {
        if (me == null) {
            me = new ManualAckForm();
        }
        return me;
    }
    
    public void getReply(String data, boolean pass, Hl7ManualAcknowledgment ack) {
        ManualAckBean mab = new ManualAckBean(data, pass, ack);
        waitingMessage.add(mab);
        ManualAckBean current = (ManualAckBean) waitingMessage.get(0);
        messageReceived.setText(current.getData().replaceAll("\r", "\r\n"));
    } 
    
    public void run() {
        while (true) {
            try {
                int waitingCount = waitingMessage.size();
                if (waitingCount > 0) {
                    ManualAckBean mab = (ManualAckBean) waitingMessage.get(0);
                    long timeDelta = System.currentTimeMillis() - mab.getTime().getTime();
                    int seconds = (int) (timeDelta / 1000.0);
                    timeReceived.setText(sdf.format(mab.getTime()));
                    sinceReceived.setText(seconds+" seconds");
                } else {
                    timeReceived.setText("");
                    sinceReceived.setText("No waiting messages");
                }
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        timeReceived = new javax.swing.JTextField();
        sinceReceived = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageReceived = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        selectAck = new javax.swing.JButton();
        selectNack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        responseMessage = new javax.swing.JTextArea();
        send = new javax.swing.JButton();
        ack = new javax.swing.JButton();
        nack = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18));
        jLabel1.setText("Integrate Client Manual ACKer");

        jLabel2.setText("Last message received:");

        jLabel3.setText("Time since received:");

        timeReceived.setEditable(false);

        sinceReceived.setEditable(false);

        jLabel4.setText("Message received:");

        messageReceived.setColumns(20);
        messageReceived.setEditable(false);
        messageReceived.setRows(5);
        jScrollPane1.setViewportView(messageReceived);

        jLabel5.setText("Select response:");

        selectAck.setText("Default ACK");
        selectAck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAckActionPerformed(evt);
            }
        });

        selectNack.setText("Default NACK");
        selectNack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectNackActionPerformed(evt);
            }
        });

        responseMessage.setColumns(20);
        responseMessage.setRows(5);
        jScrollPane2.setViewportView(responseMessage);

        send.setText("Send response");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        ack.setText("ACK");
        ack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ackActionPerformed(evt);
            }
        });

        nack.setText("NACK");
        nack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nackActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel1)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(selectAck)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(selectNack)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 85, Short.MAX_VALUE)
                        .add(send))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(sinceReceived, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                            .add(timeReceived, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ack)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(nack)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(timeReceived, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(sinceReceived, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(ack)
                    .add(nack))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 187, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(selectAck)
                    .add(selectNack)
                    .add(send))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selectAckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAckActionPerformed
        if (waitingMessage.size() > 0) {
            ManualAckBean map = (ManualAckBean) waitingMessage.get(0);
            FormatAck fa = new FormatAck(map.getData());
            currentReply = fa.getAck();
            responseMessage.setText(currentReply.replaceAll("\r", "\r\n"));
        }
    }//GEN-LAST:event_selectAckActionPerformed

    private void selectNackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectNackActionPerformed
        if (waitingMessage.size() > 0) {
            ManualAckBean map = (ManualAckBean) waitingMessage.get(0);
            FormatAck fa = new FormatAck(map.getData());
            currentReply = fa.getNack();
            responseMessage.setText(currentReply.replaceAll("\r", "\r\n"));
        }
    }//GEN-LAST:event_selectNackActionPerformed

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        if (waitingMessage.size() > 0) {
            ManualAckBean map = (ManualAckBean) waitingMessage.get(0);
            Hl7ManualAcknowledgment mack = map.getAck();
            mack.setReply(responseMessage.getText().replaceAll("\r\n", "\r"));
            responseMessage.setText("");
            waitingMessage.remove(0);
        }
        if (waitingMessage.size() > 0) {
            ManualAckBean map = (ManualAckBean) waitingMessage.get(0);
            messageReceived.setText(map.getData().replaceAll("\r", "\r\n"));
        } else {
            messageReceived.setText("");
        }
    }//GEN-LAST:event_sendActionPerformed

    private void ackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ackActionPerformed
        if (waitingMessage.size() > 0) {
            ManualAckBean map = (ManualAckBean) waitingMessage.get(0);
            Hl7ManualAcknowledgment mack = map.getAck();
            FormatAck fa = new FormatAck(map.getData());
            mack.setReply(fa.getAck());
            responseMessage.setText("");
            waitingMessage.remove(0);
        }
        if (waitingMessage.size() > 0) {
            ManualAckBean map = (ManualAckBean) waitingMessage.get(0);
            messageReceived.setText(map.getData().replaceAll("\r", "\r\n"));
        } else {
            messageReceived.setText("");
        }
}//GEN-LAST:event_ackActionPerformed

    private void nackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nackActionPerformed
        if (waitingMessage.size() > 0) {
            ManualAckBean map = (ManualAckBean) waitingMessage.get(0);
            Hl7ManualAcknowledgment mack = map.getAck();
            FormatAck fa = new FormatAck(map.getData());
            mack.setReply(fa.getNack());
            responseMessage.setText("");
            waitingMessage.remove(0);
        }
        if (waitingMessage.size() > 0) {
            ManualAckBean map = (ManualAckBean) waitingMessage.get(0);
            messageReceived.setText(map.getData().replaceAll("\r", "\r\n"));
        } else {
            messageReceived.setText("");
        }
}//GEN-LAST:event_nackActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea messageReceived;
    private javax.swing.JButton nack;
    private javax.swing.JTextArea responseMessage;
    private javax.swing.JButton selectAck;
    private javax.swing.JButton selectNack;
    private javax.swing.JButton send;
    private javax.swing.JTextField sinceReceived;
    private javax.swing.JTextField timeReceived;
    // End of variables declaration//GEN-END:variables
    
}
